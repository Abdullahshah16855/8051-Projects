C51 COMPILER V9.60.0.0   EEPROM                                                            02/21/2022 12:09:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE EEPROM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\EE
                    -PROM.lst) TABS(2) OBJECT(.\Objects\EEPROM.obj)

line level    source

   1          #include< reg51.h >
   2          
   3          sbit sda=P2^0;
   4          sbit scl=P2^1;
   5          
   6          unsigned char read_catch,z;
   7          unsigned int index=0,i=0,value,newvalue=0;
   8          
   9          unsigned int select[]  =  {0x1C,0x18,0x14,0x10,0x0C,0x08,0x04,0x00};
  10          unsigned int message[] =  {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67};
  11          
  12          void delay(unsigned int count)
  13          {
  14   1        int i,j;
  15   1        for(i=0;i<count;i++)
  16   1          for(j=0;j<114;j++);
  17   1      }
  18          
  19          
  20          void aknowledge()   //acknowledge condition
  21          {
  22   1        sda=0;
  23   1        delay(1);
  24   1        scl=1;
  25   1        delay(1);
  26   1        scl=0;
  27   1        sda=1;
  28   1      } 
  29          void start_opration()   //start_opration condition
  30          {
  31   1        sda=1;
  32   1        scl=0;
  33   1        delay(1);
  34   1        scl=1;
  35   1        delay(1);
  36   1        sda=0;
  37   1        delay(1);
  38   1        scl=0;
  39   1        
  40   1      }
  41          void stop_opration()      //stop_opration condition
  42          { 
  43   1        scl=0;
  44   1        delay(1);
  45   1        sda=0;
  46   1        delay(1);
  47   1        scl=1;
  48   1        delay(1);
  49   1        sda=1;
  50   1      
  51   1        
  52   1      }
  53          void write_lcd_eeprom(unsigned char value)  //send_catch byte serially
  54          { 
C51 COMPILER V9.60.0.0   EEPROM                                                            02/21/2022 12:09:49 PAGE 2   

  55   1        unsigned int i=0;
  56   1         
  57   1          for(i=0;i<8;i++)
  58   1        {
  59   2          sda=value & 0x80;     //extracting MSB
  60   2          
  61   2          scl=1;
  62   2          scl=0;
  63   2          value<<=1;           //shiftng left
  64   2        }
  65   1        aknowledge();
  66   1        
  67   1      }
  68          unsigned char read_eeprom()     //reading from EEPROM serially
  69          {
  70   1        unsigned int i=0;
  71   1        sda=1;
  72   1        read_catch=0;
  73   1        for(i=0;i<8;i++)
  74   1        {  delay(1);
  75   2          scl=1;
  76   2          read_catch |= sda;
  77   2          if(i<7)
  78   2            read_catch <<=1;
  79   2          scl=0;
  80   2        }
  81   1        
  82   1        return read_catch;        //Returns 8 bit data here
  83   1      }
  84          
  85          void save_data(unsigned char Data , unsigned char address , unsigned char page_addr)        
  86          {
  87   1        start_opration();
  88   1        write_lcd_eeprom(0xA0 | (page_addr>>1));            //page number  
  89   1        write_lcd_eeprom(address);                    //word address
  90   1        write_lcd_eeprom(Data);               //send data for storing in eeprom
  91   1        stop_opration();
  92   1        delay(1);
  93   1        
  94   1      }
  95          
  96          char Read_data(unsigned char address , unsigned char page_addr)
  97          {
  98   1        unsigned char DATA;
  99   1        start_opration();
 100   1        write_lcd_eeprom(0xA0 |(page_addr<<1)); // devise adress
 101   1        write_lcd_eeprom(address); //word adress
 102   1        start_opration();
 103   1        write_lcd_eeprom(0xA1 |(page_addr<<1));  //send_catch controle byte for reading
 104   1        DATA=read_eeprom();
 105   1        stop_opration();
 106   1        delay(1);
 107   1        
 108   1        return DATA;
 109   1        
 110   1      }
 111          
 112          void main()
 113          {
 114   1        
 115   1        IE = 0x82; // enable global and timer 0 intrupts
 116   1        TMOD = 0x01;  //enable mode1 of the timer 0 intrupts 
C51 COMPILER V9.60.0.0   EEPROM                                                            02/21/2022 12:09:49 PAGE 3   

 117   1        TH0 = 0x4B;
 118   1        TL0 = 0xFD;
 119   1        TR0=1;
 120   1        while(1);
 121   1        
 122   1      }
 123          
 124          void timer0_intrupt (void) interrupt 1   // called after 50 ms 
 125          {
 126   1            
 127   1        index+=1; 
 128   1        
 129   1        if(index==20) // make it 1 second 
 130   1        {    
 131   2            
 132   2             save_data (newvalue+=1,0,0);
 133   2             newvalue = Read_data(0,0); // Using page 0 and location 0
 134   2      
 135   2          switch (newvalue)
 136   2          {
 137   3            case  0 :     { P2 = select[0];
 138   4                            P0 = message[0];}
 139   3            break;
 140   3            
 141   3            case  1 :     { P2 = select[0];
 142   4                            P0 = message[1];}
 143   3            break;  
 144   3                          
 145   3            case  2 :     { P2 = select[0];
 146   4                            P0 = message[2];}
 147   3            break;
 148   3            case  3 :     { P2 = select[0];
 149   4                            P0 = message[3];}
 150   3            break;
 151   3            case  4 :     { P2 = select[0];
 152   4                            P0 = message[4];}
 153   3            break;
 154   3            case  5  :    { P2 = select[0];
 155   4                            P0 = message[5];}
 156   3            break;
 157   3            case  6 :     { P2 = select[0];
 158   4                            P0 = message[6];}
 159   3            break;
 160   3            case  7 :     { P2 = select[0];
 161   4                            P0 = message[7];}
 162   3            break;
 163   3            case  8 :     { P2 = select[0];
 164   4                            P0 = message[8];}
 165   3            break;
 166   3            case  9 :     { P2 = select[0];
 167   4                            P0 = message[9];}
 168   3            default: 
 169   3               break;
 170   3          }
 171   2          
 172   2          
 173   2          
 174   2        if (newvalue >= 8)
 175   2          {
 176   3            newvalue=0;
 177   3            save_data(0,0,0);
 178   3          }
C51 COMPILER V9.60.0.0   EEPROM                                                            02/21/2022 12:09:49 PAGE 4   

 179   2          
 180   2          index=0;
 181   2          
 182   2        }
 183   1        
 184   1        TH0 = 0x4B; //reload timer value limit
 185   1        TL0 = 0xFD;
 186   1      } 
 187          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    538    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     46       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
